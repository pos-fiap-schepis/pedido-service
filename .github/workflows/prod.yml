name: Deploy aplicacao pedido

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configurando java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Check if repository exists
        id: check_repo
        run: |
          if aws ecr describe-repositories --repository-names "${{ github.repository }}" > /dev/null 2>&1; then
            echo "Repository exists: ${{ github.repository }}"
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist: ${{ github.repository }}"
            echo "exists=false" >> $GITHUB_ENV
          fi  
  
      - name: Create repository if it doesn't exist
        if: env.exists == 'false'
        run: |
          aws ecr create-repository --repository-name "${{ github.repository }}"
          echo "Created repository: ${{ github.repository }}"

      - name: Set ECR Path Variable
        id: ecr_path
        run: |
          ECR_PATH=$(aws ecr describe-repositories --repository-names "${{ github.repository }}" --query "repositories[0].repositoryUri" --output text)
          echo "ECR_PATH=$ECR_PATH" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Fazendo build do projeto
        run: mvn clean install

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          echo "Building Docker image with ECR Path: $ECR_PATH"
          docker build -t ${{ github.repository }}:${{ github.sha }} .
          docker tag ${{ github.repository }}:${{ github.sha }} $ECR_PATH:latest

      - name: Push Docker image to ECR
        run: |
          echo "Pushing Docker image to $ECR_PATH"
          docker push $ECR_PATH:latest

  deploy:
    name: Deploy to EKS Cluster
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Retrieve RDS Endpoint and Update YAML
        id: rds_endpoint
        run: |
          RDS_HOSTNAME=$(aws rds describe-db-instances --db-instance-identifier postgres-db-fast-food --query "DBInstances[0].Endpoint.Address" --output text)
          export RDS_HOSTNAME
          echo "Updating RDS_HOSTNAME in pod-pedido-api.yaml"
          yq eval '(.spec.template.spec.containers[].env[] | select(.name == "RDS_HOSTNAME")).value = env(RDS_HOSTNAME)' -i k8s/pod-pedido-api.yaml

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name fast-food-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Apply Kubernetes configurations
        run: |
          kubectl apply -f k8s/config-map-postgres.yaml
          kubectl apply -f k8s/hpa-pedido-api.yaml
          kubectl apply -f k8s/metrics.yaml
          kubectl apply -f k8s/pod-pedido-api.yaml
          kubectl apply -f k8s/svc-pedido-api.yaml

      - name: Set ECR Path Variable
        id: ecr_path
        run: |
          ECR_PATH=$(aws ecr describe-repositories --repository-names "${{ github.repository }}" --query "repositories[0].repositoryUri" --output text)
          echo "ECR_PATH=$ECR_PATH" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update pedido-api image in deployment
        run: |
          echo "Updating deployment image to $ECR_PATH:latest"
          kubectl set image deployment/pod-pedido-api backend-pedido-api=$ECR_PATH:latest