name: Deploy aplicacao pedido

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build and Push Docker Image to ECR 2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configurando java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Fazendo build do projeto
        run: mvn clean install -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Check if repository exists
        id: check_repo
        run: |
          REPO_NAME="${{ github.repository }}"
          if aws ecr describe-repositories --repository-names "$REPO_NAME" > /dev/null 2>&1; then
            echo "Repository exists: $REPO_NAME"
            echo "::set-output name=exists::true"
          else
            echo "Repository does not exist: $REPO_NAME"
            echo "::set-output name=exists::false"
          fi

      - name: Create repository if it doesn't exist
        if: steps.check_repo.outputs.exists == 'false'
        run: |
          REPO_NAME="${{ github.repository }}"
          aws ecr create-repository --repository-name "$REPO_NAME"
          echo "Created repository: $REPO_NAME"          

      - name: Build Docker image
        run: |
          docker build -t ${{ github.repository }}:${{ github.sha }} .
          docker tag ${{ github.repository }}:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:latest

  deploy:
    name: Deploy to EKS Cluster
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name pedido-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Apply Kubernetes configurations
        run: |
          kubectl apply -f k8s/config-map-postgres.yaml
          kubectl apply -f k8s/hpa-pedido-api.yaml
          kubectl apply -f k8s/metrics.yaml
          kubectl apply -f k8s/pod-pedido-api.yaml
          kubectl apply -f k8s/svc-pedido-api.yaml

      - name: Update pedido-api image
        run: |
          kubectl set image deployment/pod-pedido-api backend-pedido-api=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:latest